{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,UAAW,SAAQ,SAAS;IACvC,sBAAsB;QACpB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,KAAK;SACb,CAAA;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAG;gBACD,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;YAAA,OAAM,KAAK,EAAC;gBACX,MAAM,CAAC,KAAK,CAAC,CAAC;aACf;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACD,uBAAuB;QACrB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,IAAI;SACZ,CAAA;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAG;gBACD,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;YAAA,OAAM,KAAK,EAAC;gBACX,MAAM,CAAC,KAAK,CAAC,CAAC;aACf;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACD,kBAAkB;QAChB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,IAAI;SACZ,CAAA;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAG;gBACD,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;YAAA,OAAM,KAAK,EAAC;gBACX,MAAM,CAAC,KAAK,CAAC,CAAC;aACf;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACD,mBAAmB;QACjB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,IAAI;SACZ,CAAA;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAG;gBACD,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB;YAAA,OAAM,KAAK,EAAC;gBACX,MAAM,CAAC,KAAK,CAAC,CAAC;aACf;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACD,cAAc,CAAC,OAAY;QACzB,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,cAAc,CAAC,OAAkC;QAC/C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAG;gBACD,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB;YAAA,OAAM,KAAK,EAAC;gBACX,MAAM,CAAC,KAAK,CAAC,CAAC;aACf;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACD,aAAa,CAAC,OAAY;QACxB,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { AutoPayPlugin } from './definitions';\n\nexport class AutoPayWeb extends WebPlugin implements AutoPayPlugin {\n  checkOverlayPermission(): Promise<any> {\n    const result = {\n      value: false\n    }\n    return new Promise((resolve, reject) => {\n      try{\n        resolve(result);\n      }catch(error){\n        reject(false);\n      }\n    });\n  }\n  enableOverlayPermission(): Promise<any> {\n    const result = {\n      value: true\n    }\n    return new Promise((resolve, reject) => {\n      try{\n        resolve(result);\n      }catch(error){\n        reject(false);\n      }\n    });\n  }\n  checkAccessibility(): Promise<any> {\n    const result = {\n      value: true\n    }\n    return new Promise((resolve, reject) => {\n      try{\n        resolve(result);\n      }catch(error){\n        reject(false);\n      }\n    });\n  }\n  enableAccessibility(): Promise<any> {\n    const result = {\n      value: true\n    }\n    return new Promise((resolve, reject) => {\n      try{\n        resolve(result);\n      }catch(error){\n        reject(false);\n      }\n    });\n  }\n  stopNavigation(options: any): Promise<any> {\n    return options;\n  }\n  performGesture(options: { x: number; y: number; }): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try{\n        resolve(options);\n      }catch(error){\n        reject(error);\n      }\n    });\n  }\n  navigateGCash(options: any): Promise<any> {\n    return options;\n  }\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n}\n"]}